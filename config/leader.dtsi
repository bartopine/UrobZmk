#undef ZMK_LEADER_SEQUENCE
#define ZMK_LEADER_SEQUENCE(name, leader_bindings, leader_sequence) \
    / { \
        behaviors { \
            leader: leader { \
                compatible = "zmk,behavior-leader-key"; \
                #binding-cells = <0>; \
                ignore-keys = <LSHFT RSHFT>; \
                leader_sequence_ ## name { \
                    bindings = <leader_bindings>; \
                    sequence = <leader_sequence>; \
                }; \
            }; \
        }; \
    };

/* Frenchies */
ZMK_LEADER_SEQUENCE(fr_a_grave,       &fr_a_grave,         A)       // à/À
ZMK_LEADER_SEQUENCE(fr_a_circumflex,  &fr_a_circumflex,    C A)     // â/Â
ZMK_LEADER_SEQUENCE(fr_c_cedilla,     &fr_c_cedilla,       S)       // ç/Ç
ZMK_LEADER_SEQUENCE(fr_e_acute,       &fr_e_acute,         E)       // é/É
ZMK_LEADER_SEQUENCE(fr_e_grave,       &fr_e_grave,         G E)     // è/È
ZMK_LEADER_SEQUENCE(fr_e_circumflex,  &fr_e_circumflex,    C E)     // ê/Ê
ZMK_LEADER_SEQUENCE(fr_e_diaeresis,   &fr_e_diaeresis,     T E)     // ë/Ë
ZMK_LEADER_SEQUENCE(fr_i_circumflex,  &fr_i_circumflex,    C I)     // î/Î
ZMK_LEADER_SEQUENCE(fr_i_diaeresis,   &fr_i_diaeresis,     T I)     // ï/Ï
ZMK_LEADER_SEQUENCE(fr_o_circumflex,  &fr_o_circumflex,    O)       // ô/Ô
ZMK_LEADER_SEQUENCE(fr_u_grave,       &fr_u_grave,         U)       // ù/Ù
ZMK_LEADER_SEQUENCE(fr_u_circumflex,  &fr_u_circumflex,    C U)     // û/Û
ZMK_LEADER_SEQUENCE(fr_u_diaeresis,   &fr_u_diaeresis,     T U)     // ü/Ü
ZMK_LEADER_SEQUENCE(fr_y_diaeresis,   &fr_y_diaeresis,     Y)       // ÿ/Ÿ

// BLE and USB
#ifdef CONFIG_WIRELESS
ZMK_LEADER_SEQUENCE(usb,        &out OUT_USB,   U S B)
ZMK_LEADER_SEQUENCE(ble,        &out OUT_BLE,   B L E)
#endif // CONFIG_WIRELESS
ZMK_LEADER_SEQUENCE(reset,      &sys_reset,     R E S E T)
ZMK_LEADER_SEQUENCE(boot,       &bootloader,    B O O T)
